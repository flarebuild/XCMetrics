// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: src/main/protobuf/android_deploy_info.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2016 The Bazel Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Blaze_Artifact {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This path is relative to "bazel info execution_root"
  public var execRootPath: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Information about how to deploy and launch the result of an android build
public struct Blaze_AndroidDeployInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The merged manifest in the resource APK
  public var mergedManifest: Blaze_Artifact {
    get {return _storage._mergedManifest ?? Blaze_Artifact()}
    set {_uniqueStorage()._mergedManifest = newValue}
  }
  /// Returns true if `mergedManifest` has been explicitly set.
  public var hasMergedManifest: Bool {return _storage._mergedManifest != nil}
  /// Clears the value of `mergedManifest`. Subsequent reads from it will return its default value.
  public mutating func clearMergedManifest() {_uniqueStorage()._mergedManifest = nil}

  /// Merged manifests of dependencies
  public var additionalMergedManifests: [Blaze_Artifact] {
    get {return _storage._additionalMergedManifests}
    set {_uniqueStorage()._additionalMergedManifests = newValue}
  }

  /// If the build supports an external deploy, this will have the APKs.
  /// mobile-install does its own deployment, so this list will be empty
  public var apksToDeploy: [Blaze_Artifact] {
    get {return _storage._apksToDeploy}
    set {_uniqueStorage()._apksToDeploy = newValue}
  }

  /// Unused
  public var dataToDeploy: [Blaze_Artifact] {
    get {return _storage._dataToDeploy}
    set {_uniqueStorage()._dataToDeploy = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "blaze"

extension Blaze_Artifact: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Artifact"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "exec_root_path"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.execRootPath)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.execRootPath.isEmpty {
      try visitor.visitSingularStringField(value: self.execRootPath, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Blaze_Artifact, rhs: Blaze_Artifact) -> Bool {
    if lhs.execRootPath != rhs.execRootPath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Blaze_AndroidDeployInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AndroidDeployInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "merged_manifest"),
    2: .standard(proto: "additional_merged_manifests"),
    3: .standard(proto: "apks_to_deploy"),
    4: .standard(proto: "data_to_deploy"),
  ]

  fileprivate class _StorageClass {
    var _mergedManifest: Blaze_Artifact? = nil
    var _additionalMergedManifests: [Blaze_Artifact] = []
    var _apksToDeploy: [Blaze_Artifact] = []
    var _dataToDeploy: [Blaze_Artifact] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _mergedManifest = source._mergedManifest
      _additionalMergedManifests = source._additionalMergedManifests
      _apksToDeploy = source._apksToDeploy
      _dataToDeploy = source._dataToDeploy
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._mergedManifest)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._additionalMergedManifests)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._apksToDeploy)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._dataToDeploy)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._mergedManifest {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._additionalMergedManifests.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._additionalMergedManifests, fieldNumber: 2)
      }
      if !_storage._apksToDeploy.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._apksToDeploy, fieldNumber: 3)
      }
      if !_storage._dataToDeploy.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._dataToDeploy, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Blaze_AndroidDeployInfo, rhs: Blaze_AndroidDeployInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._mergedManifest != rhs_storage._mergedManifest {return false}
        if _storage._additionalMergedManifests != rhs_storage._additionalMergedManifests {return false}
        if _storage._apksToDeploy != rhs_storage._apksToDeploy {return false}
        if _storage._dataToDeploy != rhs_storage._dataToDeploy {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
